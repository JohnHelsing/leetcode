//ÁªôÂÆö‰∏Ä‰∏™ÊéíÂ∫èÁöÑÊï¥Êï∞Êï∞ÁªÑ nums ÔºåÂÖ∂‰∏≠ÂÖÉÁ¥†ÁöÑËåÉÂõ¥Âú® Èó≠Âå∫Èó¥ [lower, upper] ÂΩì‰∏≠Ôºå
// ËøîÂõû‰∏çÂåÖÂê´Âú®Êï∞ÁªÑ‰∏≠ÁöÑÁº∫Â§±Âå∫Èó¥„ÄÇ
//
// Á§∫‰æãÔºö 
//
// ËæìÂÖ•: nums = [0, 1, 3, 50, 75], lower = 0 Âíå upper = 99,
//ËæìÂá∫: ["2", "4->49", "51->74", "76->99"]
// 
// Related Topics Êï∞ÁªÑ üëç 71 üëé 0

package com.helsing.leetcode.editor.cn;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Q0163_MissingRanges {

    public static void main(String[] args) {
        Solution solution = new Solution();
    }

    static
            //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public List<String> findMissingRanges(int[] nums, int lower, int upper) {
            List<String> res = new ArrayList<>();
            int low = lower - 1;
            int[] newNums = Arrays.copyOf(nums, nums.length + 1);
            newNums[nums.length] = upper + 1;
            for (int i = 0; i < newNums.length; i++) {
                int diff = newNums[i] - low;
                if (diff == 2) {
                    res.add(String.valueOf(low + 1));
                } else if (diff > 2) {
                    res.add(String.valueOf(low + 1) + "->"
                            + String.valueOf(newNums[i] - 1));
                }
                low = newNums[i];
            }
            return res;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}
