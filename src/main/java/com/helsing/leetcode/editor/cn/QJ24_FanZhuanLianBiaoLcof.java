//ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËæìÂÖ•‰∏Ä‰∏™ÈìæË°®ÁöÑÂ§¥ËäÇÁÇπÔºåÂèçËΩ¨ËØ•ÈìæË°®Âπ∂ËæìÂá∫ÂèçËΩ¨ÂêéÈìæË°®ÁöÑÂ§¥ËäÇÁÇπ„ÄÇ 
//
// 
//
// Á§∫‰æã: 
//
// ËæìÂÖ•: 1->2->3->4->5->NULL
//ËæìÂá∫: 5->4->3->2->1->NULL 
//
// 
//
// ÈôêÂà∂Ôºö 
//
// 0 <= ËäÇÁÇπ‰∏™Êï∞ <= 5000 
//
// 
//
// Ê≥®ÊÑèÔºöÊú¨È¢ò‰∏é‰∏ªÁ´ô 206 È¢òÁõ∏ÂêåÔºöhttps://leetcode-cn.com/problems/reverse-linked-list/ 
// Related Topics ÈÄíÂΩí ÈìæË°® 
// üëç 324 üëé 0

package com.helsing.leetcode.editor.cn;

import com.helsing.leetcode.bean.ListNode;

import java.util.Deque;
import java.util.LinkedList;

public class QJ24_FanZhuanLianBiaoLcof {

    public static void main(String[] args) {
        Solution solution = new Solution();
    }

    static
//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
    class Solution {
        public ListNode reverseList(ListNode head) {
            // ÁâπÂà§
            if (head == null || head.next == null) {
                return head;
            }

            // Ê†à
//            return stack(head);

            // ÂèåÊåáÈíà
//            return doublePoint(head);

            // Ëø≠‰ª£
//            return recur(head, null);

            // Â§¥ÊèíÊ≥ï
            return headInsert(head);
        }

        public ListNode headInsert(ListNode head) {
            ListNode headNew = new ListNode(-1);
            headNew.next = head;
            ListNode last = head;
            while (head != null) {
                ListNode next = head.next;
                //Â§¥ÊèíÊ≥ï
                head.next = headNew.next;
                headNew.next = head;
                head = next;
            }
            last.next = null;
            return headNew.next;
        }

        public ListNode recur(ListNode cur, ListNode pre) {
            if (cur == null) {
                return pre;
            }
            ListNode res = recur(cur.next, cur);
            cur.next = pre;
            return res;
        }

        public ListNode doublePoint(ListNode head) {
            ListNode pre = null;
            ListNode cur = head;
            while (cur != null) {
                ListNode next = head.next;
                cur.next = pre;
                pre = cur;
                cur = next;
            }
            return pre;
        }

        public ListNode stack(ListNode head) {
            Deque<ListNode> stack = new LinkedList<>();
            while (head != null) {
                stack.push(head);
                head = head.next;
            }
            ListNode node = stack.pop();
            head = node;
            while (!stack.isEmpty()) {
                node.next = stack.pop();
                node = node.next;
            }
            node.next = null;
            return head;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}