//Âú®‰∏Ä‰∏™Áî± 'L' , 'R' Âíå 'X' ‰∏â‰∏™Â≠óÁ¨¶ÁªÑÊàêÁöÑÂ≠óÁ¨¶‰∏≤Ôºà‰æãÂ¶Ç"RXXLRXRXL"Ôºâ‰∏≠ËøõË°åÁßªÂä®Êìç‰Ωú„ÄÇ‰∏ÄÊ¨°ÁßªÂä®Êìç‰ΩúÊåáÁî®‰∏Ä‰∏™"LX"ÊõøÊç¢‰∏Ä‰∏™"XL"ÔºåÊàñ
//ËÄÖÁî®‰∏Ä‰∏™"XR"ÊõøÊç¢‰∏Ä‰∏™"RX"„ÄÇÁé∞ÁªôÂÆöËµ∑ÂßãÂ≠óÁ¨¶‰∏≤startÂíåÁªìÊùüÂ≠óÁ¨¶‰∏≤endÔºåËØ∑ÁºñÂÜô‰ª£Á†ÅÔºåÂΩì‰∏î‰ªÖÂΩìÂ≠òÂú®‰∏ÄÁ≥ªÂàóÁßªÂä®Êìç‰Ωú‰ΩøÂæóstartÂèØ‰ª•ËΩ¨Êç¢ÊàêendÊó∂Ôºå ËøîÂõûT
//rue„ÄÇ 
//
// 
//
// Á§∫‰æã : 
//
// ËæìÂÖ•: start = "RXXLRXRXL", end = "XRLXXRRLX"
//ËæìÂá∫: True
//Ëß£Èáä:
//Êàë‰ª¨ÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÂá†Ê≠•Â∞ÜstartËΩ¨Êç¢Êàêend:
//RXXLRXRXL ->
//XRXLRXRXL ->
//XRLXRXRXL ->
//XRLXXRRXL ->
//XRLXXRRLX
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 1 <= len(start) = len(end) <= 10000„ÄÇ 
// startÂíåend‰∏≠ÁöÑÂ≠óÁ¨¶‰∏≤‰ªÖÈôê‰∫é'L', 'R'Âíå'X'„ÄÇ 
// 
// Related Topics ÂèåÊåáÈíà Â≠óÁ¨¶‰∏≤ 
// üëç 103 üëé 0

package com.helsing.leetcode.editor.cn;

public class Q0777_SwapAdjacentInLrString {

    public static void main(String[] args) {
        Solution solution = new Solution();
    }

    static
            //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public boolean canTransform(String start, String end) {
            // ÂèåÊåáÈíà
            return twoPointers(start, end);
        }

        public boolean twoPointers(String start, String end) {
            if (start.length() != end.length())
                return false;

            int len = start.length();
            StringBuilder sb1 = new StringBuilder();
            StringBuilder sb2 = new StringBuilder();
            for (int i = 0; i < start.length(); i++) {
                if (start.charAt(i) != 'X')
                    sb1.append(start.charAt(i));
                if (end.charAt(i) != 'X')
                    sb2.append(end.charAt(i));
            }

            if (!sb1.toString().equals(sb2.toString()))
                return false;

            // L R
            int up = 0, down = 0;
            /**
             * to see the L part
             *   L -> start.charAt() index1
             *   L -> end.charAt()   index2
             *      |
             *          |
             *      index1 < index2 -> false
             */
            while (up < len && down < len) {
                while (up < len && start.charAt(up) != 'L')
                    up++;
                while (down < len && end.charAt(down) != 'L')
                    down++;

                if (up == len || down == len) {
                    if (noSymbol(start, up + 1, 'L', true) && noSymbol(end, down + 1, 'L', true))
                        break;
                    else
                        return false;
                }

                if (up < down)
                    return false;
                up++;
                down++;
            }

            up = len - 1;
            down = len - 1;
            /**
             * to see the right part
             *  R -> start.charAt() index1
             *  R -> start.charAt() index2
             *    |    |
             *      |
             *      index1 >  index2 false
             */
            while (up >= 0 && down >= 0) {
                while (up >= 0 && start.charAt(up) != 'R')
                    up--;
                while (down >= 0 && end.charAt(down) != 'R')
                    down--;

                if (up == 0 || down == 0) {
                    if (noSymbol(start, up - 1, 'R', false) && noSymbol(end, down - 1, 'R', false))
                        break;
                    else
                        return false;
                }

                if (up > down)
                    return false;
                up--;
                down--;
            }

            return true;
        }

        private boolean noSymbol(String start, int index, char ch, boolean l2r) {
            if (l2r) {
                for (int i = index; i < start.length(); i++) {
                    if (start.charAt(i) == ch)
                        return false;
                }
                return true;
            } else {
                for (int i = index; i >= 0; i--) {
                    if (start.charAt(i) == ch)
                        return false;
                }
                return true;
            }
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}